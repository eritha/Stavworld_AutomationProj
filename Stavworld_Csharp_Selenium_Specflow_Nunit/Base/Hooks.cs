using AventStack.ExtentReports;
using AventStack.ExtentReports.Gherkin.Model;
using AventStack.ExtentReports.Reporter;
using BoDi;
using Stavworld_Csharp_Selenium_Specflow_Nunit.Utility;
using NUnit.Framework;
using OpenQA.Selenium;
using System;
using System.Configuration;
using System.IO;
using TechTalk.SpecFlow;

namespace Stavworld_Csharp_Selenium_Specflow_Nunit.Base
{
    [Binding]
    public class Hooks
    {
        private readonly IObjectContainer _objectContainer;
        private static IWebDriver driver;
        private static DriverFactory driverFactory;

        // Extent report
        private static ExtentTest _feature; // Node for the Feature
        private static ExtentTest _scenario; // Node for the Scenario
        private static ExtentReports _extent; // ExtentReports object to be created

        // Here I am saving in the bin / debug folder of the project, the report file called index.html with timeStamp for each run
        private static string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmss");
        public static string pathReport;
        public static string reportHtml;

        public Hooks(IObjectContainer objectContainer)
        {
            _objectContainer = objectContainer;
        }

        [BeforeTestRun]
        public static void BeforeTestRun()
        {
            // Init data config 
            Configs.InitDataConfig();

            // Init report index.html
            pathReport = $"{AppDomain.CurrentDomain.BaseDirectory}" + timeStamp + Configs.varBrowser + Path.AltDirectorySeparatorChar;
            reportHtml = pathReport + Configs.varReportHtlm;

            // Create folder report
            Directory.CreateDirectory(Path.Combine(pathReport));

            // Here I inform the path of the file that will be generated by creating an ExtentSparkReporter object
            var reporter = new ExtentSparkReporter(reportHtml);
            reporter.Config.DocumentTitle = "StavPay Dashboard Test Report";
            reporter.Config.ReportName = "StavPay Dashboard Automation";

            // Instantiate the ExtentReports object
            _extent = new ExtentReports();
            _extent.AddSystemInfo("Host Name", Configs.varOrgName);
            _extent.AddSystemInfo("Environment", Configs.varEnvironment);
            _extent.AddSystemInfo("QC", Configs.varQcName);

            // Then attach in ExtentHtmlReporter
            _extent.AttachReporter(reporter);
        }

        [AfterTestRun]
        public static void AfterTestRun()
        {
            // Open folder & report after finishing test
            System.Diagnostics.Process.Start(pathReport);
            System.Diagnostics.Process.Start(reportHtml);
        }

        [BeforeFeature]
        public static void BeforeFeature(FeatureContext featureContext)
        { 
            _feature = _extent.CreateTest<Feature>(featureContext.FeatureInfo.Title);
            _feature.AssignCategory(featureContext.FeatureInfo.Tags);
        }

        [AfterFeature]
        public static void AfterFeature()
        {
            _extent.Flush();
        }

        [BeforeScenario(Order = 0)]
        public void BeforeScenario(ScenarioContext scenarioContext)
        {
            // Create new driver for each scenario
            driverFactory = new DriverFactory();
            driver = driverFactory.CreateDriver();
            
            // Handle Wait & Maximize the Browser
            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);
            driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(50);
            driver.Manage().Timeouts().AsynchronousJavaScript = TimeSpan.FromSeconds(30);
            driver.Manage().Window.Maximize();
            _objectContainer.RegisterInstanceAs(driver);

            //Create dynamic scenario name
            _scenario = _feature.CreateNode<Scenario>(scenarioContext.ScenarioInfo.Title);
            
            Console.WriteLine($"[DEBUG] New browser opened for scenario: {scenarioContext.ScenarioInfo.Title}");
        }

        [AfterStep]
        public void InsertReportingStepsAndScreenshot(ScenarioContext scenarioContext)
        {
            var takesScreenshot = driver as ITakesScreenshot;
            var pathFileName = "";

            if (scenarioContext.TestError != null)
            {
                if (takesScreenshot != null)
                {
                    var screenshot = takesScreenshot.GetScreenshot();
                    var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss_fff");
                    var stepInfo = ScenarioStepContext.Current.StepInfo.Text.Replace(" ", "_").Replace("'", "").Replace("\"", "");
                    pathFileName = Path.Combine(pathReport, $"{scenarioContext.ScenarioInfo.Title}_{stepInfo}_{timestamp}.jpg");
                    screenshot.SaveAsFile(pathFileName);

                    Console.WriteLine($"SCREENSHOT[ file:///{pathFileName} ]SCREENSHOT");
                }
            }

            // Add Gherkin to report
            switch (ScenarioStepContext.Current.StepInfo.StepDefinitionType)
            {
                case TechTalk.SpecFlow.Bindings.StepDefinitionType.Given:
                    _scenario.CreateNode<Given>(ScenarioStepContext.Current.StepInfo.Text);
                    break;

                case TechTalk.SpecFlow.Bindings.StepDefinitionType.Then:
                    _scenario.CreateNode<Then>(ScenarioStepContext.Current.StepInfo.Text);
                    break;

                case TechTalk.SpecFlow.Bindings.StepDefinitionType.When:
                    _scenario.CreateNode<When>(ScenarioStepContext.Current.StepInfo.Text);
                    break;
            }
        }

        [AfterScenario]
        public void AfterScenario(ScenarioContext scenarioContext)
        {
            // Close browser after each scenario
            if (driver != null)
            {
                Console.WriteLine($"[DEBUG] Closing browser for scenario: {scenarioContext.ScenarioInfo.Title}");
                driver.Quit();
                driver = null;
            }
        }
    }
}